env:
  DEVICE_NAME: "iPhone 16 Pro"
  API_BASE_URL: "https://sdbnrxt339.execute-api.ap-southeast-2.amazonaws.com/api"
  API_URL: "https://sdbnrxt339.execute-api.ap-southeast-2.amazonaws.com/api"
  X_API_KEY: "demo-key-123"
  APP_ZIP_URL: "https://ios-ci-artifacts-bucket-anish.s3.ap-southeast-2.amazonaws.com/ios/SimpleAPIAppanish.app.zip?X-Amz-Algorithm=AWS4-HMAC-SHA256&X-Amz-Credential=AKIAUHVSWCJQTPALQ4XL%2F20250927%2Fap-southeast-2%2Fs3%2Faws4_request&X-Amz-Date=20250927T224608Z&X-Amz-Expires=604800&X-Amz-SignedHeaders=host&X-Amz-Signature=ab10be1924c4bf5304dbedc9f8aedf186b46557f39dec24865d638fdf8accc6e"

steps:
  - label: ":package: Download prebuilt iOS app"
    key: build-app
    agents: { queue: default }
    commands:
      - set -euo pipefail
      - mkdir -p artifacts
      - echo "Downloading app zip"
      - curl -fL "$APP_ZIP_URL" -o artifacts/SimpleAPIAppanish.app.zip
      - du -h artifacts/SimpleAPIAppanish.app.zip || true
      - buildkite-agent artifact upload artifacts/SimpleAPIAppanish.app.zip

  - wait

  - label: ":test_tube: E2E (Playwright + Appium with Arch Check)"
    key: e2e
    agents: { queue: default }
    concurrency: 1
    concurrency_group: ios-simulator
    timeout_in_minutes: 60
    commands: |
      set -euo pipefail

      node --version && npm --version
      npm ci

      buildkite-agent artifact download "artifacts/SimpleAPIAppanish.app.zip" .
      unzip -oq artifacts/SimpleAPIAppanish.app.zip -d artifacts

      echo "[arch-check] Agent architecture: $(uname -m)"
      AGENT_ARCH="$(uname -m)"

      APP_PATH="$(/usr/bin/find artifacts . -type d -name '*.app' | head -n1)"
      if [ -z "$APP_PATH" ]; then echo "ERROR: .app bundle not found"; exit 1; fi

      EXEC_NAME="$(basename "$APP_PATH")"
      APP_BINARY="$APP_PATH/$EXEC_NAME"
      if [ ! -f "$APP_BINARY" ]; then
        APP_BINARY="$(find "$APP_PATH" -type f -perm +111 -print | head -n1)"
      fi

      if [ ! -f "$APP_BINARY" ]; then
        echo "ERROR: Could not find executable inside .app"; exit 1
      fi

      echo "[arch-check] App binary: $APP_BINARY"
      file "$APP_BINARY"
      APP_ARCH="$(file "$APP_BINARY" | awk '{print $NF}')"

      if [ "$AGENT_ARCH" = "arm64" ] && [ "$APP_ARCH" = "x86_64" ]; then
        echo "❌ ARCH MISMATCH: App is x86_64 but agent is arm64. App will not run."
        exit 1
      fi

      echo "✅ ARCH OK: App ($APP_ARCH) matches agent ($AGENT_ARCH)"

      export IOS_APP_DIR="$APP_PATH"
      export DEVICE_NAME="$DEVICE_NAME"
      export API_BASE_URL="$API_BASE_URL"
      export API_URL="$API_URL"
      export X_API_KEY="$X_API_KEY"

      bash scripts/sim-boot.sh "$DEVICE_NAME"
      SIM_UDID="$(cat artifacts/sim-udid.txt 2>/dev/null || true)"
      if [ -z "$SIM_UDID" ]; then
        SIM_UDID="$(xcrun simctl list devices booted | sed -n 's/.*(\([A-F0-9-]\{36\}\)).*//p' | head -n1 || true)"
      fi
      [ -z "$SIM_UDID" ] && { echo "ERROR: No booted simulator UDID found"; exit 1; }

      export SIM_UDID="$SIM_UDID"

      IOS_BUNDLE_ID="$(/usr/libexec/PlistBuddy -c 'Print :CFBundleIdentifier' "$IOS_APP_DIR/Info.plist" 2>/dev/null || true)"
      [ -n "$IOS_BUNDLE_ID" ] && xcrun simctl install "$SIM_UDID" "$IOS_APP_DIR"

      xcrun simctl spawn "$SIM_UDID" launchctl setenv API_BASE_URL "$API_BASE_URL"
      xcrun simctl spawn "$SIM_UDID" launchctl setenv API_URL "$API_URL"
      xcrun simctl spawn "$SIM_UDID" launchctl setenv X_API_KEY "$X_API_KEY"

      bash scripts/start-appium.sh
      bash scripts/wait-on-http.sh http://127.0.0.1:4723/status 45

      npm run test:ci

      bash scripts/stop-appium.sh || { echo "Appium shutdown failed"; tail -n +1 artifacts/appium.log || true; exit 1; }
    artifact_paths:
      - "playwright-report/**"
      - "junit-report.xml"
      - "artifacts/**"

  - wait

  - label: ":memo: Annotate JUnit"
    agents: { queue: default }
    plugins:
      - junit-annotate#v2.4.0:
          artifacts: "junit-report.xml"
          soft_fail: true
    commands: "echo Annotating JUnit results"