/Users/user/Library/Developer/Xcode/DerivedData/SimpleAPIAppanish-ddufydmpunqlildogpkdvxqxalcy/Build/Products/Debug-iphonesimulator/SimpleAPIAppanish.app


npx appium@latest --base-path / --port ${APPIUM_PORT:-4723} --log-timestamp > artifacts/appium.log 2>&1 &
npx playwright test


npx appium@latest --base-path / --port ${APPIUM_PORT:-4723} --log-timestamp > artifacts/appium.log 2>&1 &

npx playwright test





chmod +x scripts/start-appium.sh

==
# Graceful stop (if you saved a pidfile)
[ -f .appium.pid ] && kill -TERM "$(cat .appium.pid)" && rm .appium.pid

# Or stop by port (no pidfile needed)
kill -TERM "$(lsof -tiTCP:4723 -sTCP:LISTEN -P -n)" 2>/dev/null || true

# If it’s stubborn:
kill -9 "$(lsof -tiTCP:4723 -sTCP:LISTEN -P -n)" 2>/dev/null || true

# Verify it’s gone (should print nothing)
lsof -iTCP:4723 -sTCP:LISTEN -P -n


==
source scripts/env.sh

npx playwright test --workers=1


only one test

npx playwright test tests/appium.spec.ts -g "Error banner when API fails" --workers=1 --retries=0
=====another iteration

cd /Users/user/Desktop/Files-not-on-onedrive/anish-projects/playwright-appium-e2e-with-users-tests
source scripts/env.sh   # if your tests expect those env vars

# run everything
npx playwright test

# or: run just the iOS/Appium suite
npx playwright test tests/appium.spec.ts --workers=1 --retries=0
===trying on buildkite before device farm

scripts/*.sh are executable (chmod +x scripts/*.sh).

chmod +x scripts/run-api-tests.sh

...
aws api
cd "/Users/user/Desktop/Files-not-on-onedrive/anish-projects/reqres-api/reqres-lambda"  
sam build -t template.yaml --region ap-southeast-2
sam deploy --guided -t template.yaml --region ap-southeast-2


test it
API_URL="https://<api-id>.execute-api.ap-southeast-2.amazonaws.com"

# Health check (no auth header needed)
curl -i "$API_URL/healthz"

# Users endpoint (needs x-api-key header)
curl -i -H 'x-api-key: demo-key-123' "$API_URL/api/users?page=2"

...
API_URL="https://sdbnrxt339.execute-api.ap-southeast-2.amazonaws.com"


API_URL="https://sdbnrxt339.execute-api.ap-southeast-2.amazonaws.com"

API_URL="https://sdbnrxt339.execute-api.ap-southeast-2.amazonaws.com"


# Health check (no auth header needed)
curl -i "$API_URL/healthz"

# Users endpoint (needs x-api-key header)
curl -i -H 'x-api-key: demo-key-123' "$API_URL/api/users?page=2"
===
Stack Name [sam-app]: reqres-lambda
AWS Region [ap-southeast-2]:            ← press Enter
Parameter ApiKeyValue [demo-key-123]:   ← enter your key or press Enter to keep demo-key-123
Confirm changes before deploy [y/N]: N
Allow SAM CLI IAM role creation [Y/n]: Y
Disable rollback [y/N]: N
Save arguments to configuration file [Y/n]: Y
SAM configuration file [samconfig.toml]:   ← press Enter
SAM configuration environment [default]:    ← press Enter


===
export API_BASE_ORIGIN="https://sdbnrxt339.execute-api.ap-southeast-2.amazonaws.com"
export X_API_KEY="demo-key-123"

===

APP_PATH="$(/usr/bin/find ./artifacts -maxdepth 5 -type d -name 'SimpleAPIAppanish*.app' -print -quit)"
[ -d "$APP_PATH" ] || { echo "App not found"; exit 1; }
echo "APP_PATH=$APP_PATH"

APP_PATH=./artifacts/SimpleAPIAppanish.app
===
 BUNDLE_ID="$(/usr/libexec/PlistBuddy -c 'Print :CFBundleIdentifier' "$APP_PATH/Info.plist")"
EXEC_NAME="$(/usr/libexec/PlistBuddy -c 'Print :CFBundleExecutable'  "$APP_PATH/Info.plist")"
echo "BUNDLE_ID=$BUNDLE_ID"
echo "EXEC_NAME=$EXEC_NAME"

BUNDLE_ID=com.anishmathew.SimpleAPIApp.SimpleAPIAppanish.dev123
EXEC_NAME=SimpleAPIAppanish



==inside simulator then

user@users-MacBook-Pro ios-app % APP_PATH="$(xcrun simctl get_app_container booted "$BUNDLE_ID" app)"
[ -d "$APP_PATH" ] || { echo "Installed app bundle not found"; exit 1; }
echo "APP_PATH=$APP_PATH"
APP_PATH=/Users/user/Library/Developer/CoreSimulator/Devices/98F4297B-7A19-4B76-98B2-C5AA6880EE8F/data/Containers/Bundle/Application/5B1AA25E-3308-4E9F-A355-AB3FE422F796/SimpleAPIAppanish.app

...
r@users-MacBook-Pro ios-app % EXEC_NAME="$(/usr/libexec/PlistBuddy -c 'Print :CFBundleExecutable' "$APP_PATH/Info.plist")"
echo "EXEC_NAME=$EXEC_NAME"
EXEC_NAME=SimpleAPIAppanish
...
xcrun simctl install booted "$APP_PATH" 2>/dev/null || true
xcrun simctl launch --console booted "$BUNDLE_ID"

...
seocnd terminall


xcrun simctl spawn booted log stream \
  --predicate 'subsystem == "com.apple.CFNetwork" && process == "'$EXEC_NAME'"' --info


